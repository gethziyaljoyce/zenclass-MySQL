1. Create tables for the above list given
2. insert at least 5 rows of values in each table

--create database

create database students; 
use students;

--create tables

--users

 create table users(student_name varchar(100),student_mail varchar(100));
 
 alter table users add column (id integer);
 
  insert into users (id,student_name,student_mail) values (1,"joyce","jc.getjoy@gmail.com");
  
  insert into users (id,student_name,student_mail) values (2,"yosiya","yosi@gmail.com");

insert into users (id,student_name,student_mail) values (3,"yobu","yobu@gmail.com");

insert into users (id,student_name,student_mail) values (4,"joshua","joshua@gmail.com"),(5,"jenita","jenita@gmail.com");

3. get number problems solved in codekata by combining the users

--code_kata

create table code_kata (userId integer,noOfPblmSolved integer,foreign key (userId)references users(id));


 insert into code_kata (userId,noOfPblmSolved) values (1,100),(2,110),(3,130),(4,100),(5,120);
 
 --attendance
 
 
 create table attendance(id integer,percentageOfAttendance integer);


 insert into attendance(id,percentageOfAttendance) values (1,100),(2,99),(3,100),(4,99),(5,100);


 alter table attendance add foreign key(id) references users(id);
 
 --topics
 
create table topics(topic_id integer,topic_name varchar(100));

insert into topics (topic_id,topic_name)values(1,"java_script"),(2,"html_css"),(3,"react"),(4,"mongoDB"),(5,"node_js");


--tasks

create table tasks(title varchar(100),task varchar(100));

insert into tasks(title,task) values ("html","design a html form"),("htmlAndCss","pagination"),("javascript","do MRF for the given array"),("DOMmanipulation","CRUD operation on an API"),("react","crud using axios");


--company_drives

 create table company_drives (companyID integer primary key,companyName varchar(100));

insert into company_drives (companyID,companyName)values (1,"zoho"),(2,"paypal"),(3,"tcs"),(4,"cts"),(5,"infosys");

--students_drive

 create table students_drive (studentID integer,companyID integer,foreign key(studentID) references users(id),foreign key(companyID) references company_drives(companyID));

 4. display the no of company drives attended by a user
 
 insert into students_drive values(1,1),(1,2),(1,4),(2,1),(2,4),(2,5),(3,1),(3,3),(4,5),(5,1);
 
 select student_name,count(s.companyID) as drive_count,group_concat(companyName) as companies_name from students_drive s join users on id=s.studentID join company_drives a on a.companyID=s.companyID group by studentID;
 
 --mentors
 
 create table mentors(mentorID integer primary key,mentorName varchar(100),noOfStu integer);

 insert into mentors values (101,"Mr.x",50),(102,"Mr.y",60),(103,"Mr.z",40),(104,"Mr.a",48),(105,"Mr.b",50);
 
6. list all the mentors

select * from mentors;

7. list the number of students that are assigned for a mentor

select count(*) from users where mentor= "Mr.x";

--courses

 create table courses (courseID integer primary key,courseName varchar(100));

 insert into courses values(1,"full stack developer"),(2,"c language"),(3,"java"),(4,"python"),(5,"data science");
 
 --students_activated_courses
 
 create table students_activated_courses (student_id integer,course_id integer,foreign key(student_id) references users(id),foreign key(course_id) references courses(courseID));
 
 insert into students_activated_courses values (1,1),(1,2),(2,3),(2,4),(2,5),(3,1),(3,2),(4,1),(4,3),(4,4),(5,3),(5,5);
 
 5. combine and display students_activated_courses and courses for a specific user groping them based on the course
 
select student_name,count(*),student_id from students_activated_courses join users on student_id=id group by student_id;
